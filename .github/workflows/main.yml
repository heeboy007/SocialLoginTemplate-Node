# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # 지정한 branch에서 push/pull_request 에 해당하는 command가 수행되면 이 workflow가 동작 합니다.
  push:
    branches: 
      - master

  # 이부분은 위의 trigger가 없어도 수동으로 동작 할 수 있게끔 해주는 역할을 합니다.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build" 
  build:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: checkout release
      uses: actions/checkout@v3

    # 빌드 전 .env파일 생성
    - name: Generate Environment Variables File for Production
    #2.$를 통해 변수 할당
      run: |
        echo "JWT_SECRETKEY=$JWT_SECRETKEY" >> .env
        echo "MYSQLDB_URL=$MYSQLDB_URL" >> .env
        echo "MYSQLDB_DATABASE=$MYSQLDB_DATABASE" >> .env
        echo "MYSQLDB_USER=$MYSQLDB_USER" >> .env
        echo "MYSQLDB_PASSWORD=$MYSQLDB_PASSWORD" >> .env
        echo "PORT=$PORT" >> .env
        echo "DEV_MODE=PROD" >> .env
        echo "HTTPS_MODE=HTTPS" >> .env
        echo "GOOGLE_MAIL_KEY=$GOOGLE_MAIL_KEY" >> .env
        echo "GOOGLE_OAUTH_CLIENT_KEY=$GOOGLE_OAUTH_CLIENT_KEY" >> .env
      #1.여기서 secrets변수를 가져오고
      env:
        AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
        JWT_SECRETKEY: ${{ secrets.JWT_SECRETKEY }}
        MYSQLDB_URL: ${{ secrets.MYSQLDB_URL }}
        MYSQLDB_DATABASE: ${{ secrets.MYSQLDB_DATABASE }}
        MYSQLDB_USER: ${{ secrets.MYSQLDB_USER }}
        MYSQLDB_PASSWORD: ${{ secrets.MYSQLDB_PASSWORD }}
        PORT: ${{ secrets.PORT }}
        GOOGLE_MAIL_KEY: ${{ secrets.GOOGLE_MAIL_KEY }}
        GOOGLE_OAUTH_CLIENT_KEY: ${{ secrets.GOOGLE_OAUTH_CLIENT_KEY }}

    - name: Cache node modules
      uses: actions/cache@v2
      id: cache
      with:
        path: node_modules
        key: npm-packages-${{ hashFiles('**/package-lock.json') }}

    - name: Install Dependencies	# 디펜던시 키가 없으면 디펜던시 인스톨
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm install
      
    - name: archive hive-f-server 
      run: tar cvfz ./hive-f-server.tar.gz * .env

    - name: AWS configure credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions
        aws-region: ap-northeast-2
        
    - name: upload to S3
      run: aws s3 cp --region ap-northeast-2 ./hive-f-server.tar.gz ${{ secrets.S3_ARCHIVE_URL }}
      
    - name: deploy with AWS codeDeploy
      run: aws deploy create-deployment
        --application-name hive-f
        --deployment-config-name CodeDeployDefault.OneAtATime
        --deployment-group-name hive-github-actions
        --s3-location bucket=hive-f-s3-bucket,bundleType=tgz,key=archive/hive-f-server.tar.gz
