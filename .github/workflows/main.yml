# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # 지정한 branch에서 push/pull_request 에 해당하는 command가 수행되면 이 workflow가 동작 합니다.
  push:
    branches: 
      - master #this is master intentionaly, dont' wanna trigger it for real!

  # 이부분은 위의 trigger가 없어도 수동으로 동작 할 수 있게끔 해주는 역할을 합니다.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build" 
  build:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout Release
      uses: actions/checkout@v4.2.2

    # 빌드 전 .env파일 생성
    - name: Generate Environment Variables File for Production
        envsubst < .env.template > .env
      #1.여기서 secrets변수를 가져오고
      env:
        APP_HTTPS_CREDENTIALS_PATH: ${{ secrets.APP_HTTPS_CREDENTIALS_PATH }}
        APP_JWT_SECRETKEY: ${{ secrets.APP_JWT_SECRETKEY }}
        APP_PORT: ${{ secrets.APP_PORT }}
        APP_PROTOCOL: ${{ secrets.APP_PROTOCOL }}
        APP_REQUIERD_DB_VERSION: ${{ secrets.APP_REQUIERD_DB_VERSION }}
        AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
        AWS_S3_NAME: ${{ secrets.AWS_S3_NAME }}
        KAKAO_NATIVE_KEY: ${{ secrets.KAKAO_NATIVE_KEY }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        APP_DOMAIN: ${{ env.APP_DOMAIN }}
        APP_LOG_DIR: ${{ env.APP_LOG_DIR }}
        APP_MODE: ${{ env.APP_MODE }}
        APP_OFFICIAL_MAIL: ${{ env.APP_OFFICIAL_MAIL }}

    - name: Cache
      uses: actions/cache@v4.2.3
      id: cache
      with:
        path: node_modules
        key: npm-packages-${{ hashFiles('**/package-lock.json') }}

    - name: Install Dependencies	# 디펜던시 키가 없으면 디펜던시 인스톨
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm install

    - name: Archiving Deployment
      run: tar cvfz ./deploy.tar.gz * .env

    - name: AWS configure credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions
        aws-region: ${{ env.AWS_REGION }}
        
    - name: upload to S3
      run: aws s3 cp --region ${{ env.AWS_REGION }} ./deploy.tar.gz s3://${{ env.AWS_S3_BUCKET }}/archive/deploy.tar.gz
      
    - name: deploy with AWS codeDeploy
      run: aws deploy create-deployment
        --application-name ${{ env.AWS_CODEDEPLOY_APP_NAME }}
        --deployment-config-name CodeDeployDefault.OneAtATime
        --deployment-group-name ${{ env.AWS_CODEDEPLOY_GROUP_NAME }}
        --s3-location bucket=${{ env.AWS_S3_BUCKET }},bundleType=tgz,key=archive/deploy.tar.gz
